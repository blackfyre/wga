name: Playwright Tests
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
jobs:
  test:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Generate .env file
        run: cp .env.example .env
      - name: Get installed Playwright version
        id: playwright-version
        run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package-lock.json').packages['node_modules/@playwright/test'].version)")" >> $GITHUB_ENV
      - name: Cache playwright binaries
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
      - uses: "github.com/actions-go/go-install@main"
        with:
          module: "github.com/a-h/templ/cmd/templ@latest"
          go-version: "1.22"
      - uses: "github.com/actions-go/go-install@main"
        with:
          module: "github.com/go-task/task/v3/cmd/task@latest"
          go-version: "1.22"
      - name: Compile templates
        run: templ generate
      - name: Install go modules
        run: go mod tidy
      - name: Install dependencies
        run: npm ci
      - name: Transpile Frontend
        run: task build:frontend
      - run: npx playwright install --with-deps
        name: Install Playwright
        if: steps.playwright-cache.outputs.cache-hit != 'true'
      - run: npx playwright install-deps
        name: Install Playwright dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
      - name: Build the application
        run: go build -o wga
      - name: Run Playwright tests
        run: npx playwright test
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
